#ifndef CONTROLPOINTHANDLE_H
#define CONTROLPOINTHANDLE_H

#include "BoundaryPointModel.h"
#include <QGraphicsItem>
#include "ViewScaler.h"

class ControlPointBoundingBox;

/**
 * @brief The ControlPointDragHandle class is a draggable object that allows you to extend the size of the corresponding
 * control point bounding box in two directions, depending on which corner it is assigned to (top-left, or bottom-right).
 */
class ControlPointDragHandle : public QGraphicsItem
{
public:
    /**
     * @brief ControlPointDragHandle Constructor Method.
     * @param model BoundaryPointModel that this drag handle corresponds to.
     * @param index Relative index of the boundary point within the model that this drag handle corresponds to.
     * @param corner Specifies whether this is the drag handle for the top-left, or bottom-right corner of control point bounding box.
     * @param scaler View Scaler.
     * @param parent
     */
    ControlPointDragHandle(BoundaryPointModel* model, int index, BoundaryPointModel::CornerPosition corner, ViewScaler* scaler, QGraphicsItem* parent = nullptr);

    /**
     * @brief boundingRect Implemented as part of QGraphicsItem.
     * @return
     */
    QRectF boundingRect() const override;

    /**
     * @brief paint Implemented as part of QGraphicsItem.
     * @param painter
     * @param item
     */
    void paint(QPainter *painter, const QStyleOptionGraphicsItem *item, QWidget */*widget*/) override;

private:
    /**
     * @brief hoverEnterEvent When hovering over the drag handle, change the cursor to Qt::SizeFDiagCursor
     * and disables mouse dragging i.e. the mesh will not move across the screen when hovering over handle.
     * Overrides hoverEnterEvent method in QGraphicsItem.
     * @param event QGraphicsSceneHoverEvent event generated by program.
     *
     */
    void hoverEnterEvent(QGraphicsSceneHoverEvent *event) override;

    /**
     * @brief hoverLeaveEvent After finished hovering over the drag handle, sets the cursor back to Qt::ArrowCursor
     * and continues to disable dragging in case moving across Boundary Point.
     * Overrides hoverLeaveEvent method in QGraphicsItem.
     * @param event QGraphicsSceneHoverEvent generated by
     */
    void hoverLeaveEvent(QGraphicsSceneHoverEvent *event) override;

    /**
     * @brief itemChange Limits the dragging value so that its XY position does not go below, or exceed 0, depending on the corner.
     * For instance if top-left corner, X value must be greater than zero, and y value must be greater than zero even if dragging would normally reduce the values below this.
     * Similar for bottom-right corner except X and Y value cannot be greater than zero.
     * @param change GraphicsItemChange
     * @param value
     * @return
     */
    QVariant itemChange(GraphicsItemChange change, const QVariant &value) override;

    /**
     * @brief corner Specifies whether this drag handle is for the top-left,
     * or bottom-right corner.
     */
    BoundaryPointModel::CornerPosition corner;

    /**
     * @brief mHandleRect This is the visible control point drag handle.
     */
    QRectF mHandleRect;

    /**
     * @brief mHoverRect This is the invisible range over which you can select and drag a control point drag handle.
     */
    QRectF mHoverRect;

    /**
     * @brief mBoundaryPointModel Boundary Point Model that this drag handle belongs to.
     */
    BoundaryPointModel* mBoundaryPointModel;

    /**
     * @brief mBoundaryPointIndex The relative index within the boundary point model that this drag handle corresponds to.
     */
    int mBoundaryPointIndex;

    /**
     * @brief mBoundaryPoint Specific boundary point within boundary point model that this drag handle corresponds to.
     */
    BoundaryPoint* mBoundaryPoint;

    /**
     * @brief mScale View scaler
     */
    ViewScaler* mScale;
};


#endif // CONTROLPOINTHANDLE_H
